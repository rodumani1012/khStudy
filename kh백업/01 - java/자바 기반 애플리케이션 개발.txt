개발환경 구축시 고려하여야 할 사항 (객관식)
-개발자별 로컬 개발환경을 동일하게 구축한다.
-프로젝트 버전 관리용 서버(예 : git)에 개발자별로 로컬환경에서 개발된 소스를 커밋하여 종합한다.
-종합된 소스를 개발서버로 옮겨 테스트한다.

요구사항 분석{217페이지}
-요구사항들간 상충되는 것을 해결하고 소프트웨어의 범위를 파악하며 소프트웨어가 환경과 어떻게 상호작용하는지 이해한다. 시스템 요구사항을 정제하여 소프트웨어 요구사항을 도출한다.

요구사항 추적 매트릭스 : 사용자 요구사항이 어떻게 분석 -> 설계 -> 구현 -> 테스트 되는지를 알 수 있게 하여, 요구사항과 프로젝트 산출물 간의 일관성을 확보하기 위하여 작성되는 산출물 {사용자에게 요구사항 진행 상태를 보여주기 위한 서류이다.}

서비스 지향 아키텍쳐 (객관식)
-프로세스 수행을 지원하는 애플리케이션의 구현을 위해 가장 선진화된 SW 아키텍처라고 할 수 있다.
-웹서비스나 REST 서비스로 구현된 SW 모듈들을 BPEL로 구현한 프로세스이다.
-오케스트레이션(Orchestration) 함으로써, 프로세스 변경에 따른 애플리케이션의 재구성을 신속, 유연하게 할 수 있는 방식이다.

프로젝트 관리 주기 : 프로젝트 설계 -> 시뮬레이션 -> 구현 -> 실행 -> 모니터링 -> 최적화

애플리케이션 버전(형상)관리 (주관식)
형상관리란 프로젝트상의 소프트웨어 라이프사이클 기간 동안 개발되는 제품의 무결성을 유지하는 것을 내용으로 하며, 프로젝트 또는 프로그래밍 팀에 의해서 제작되고 있는 소프트웨어의 식별, 편성 및 수정을 통제하는 프로세스로, 실수를 최소화함으로써 생산성을 최대화하는 것이 형상관리의 궁극적인 목표이다.

-형상관리 지침을 활용하여 제품소프트웨어의 신규 개발, 변경, 개선과 관련된 버전을 등록한다. 
-형상관리 지침을 활용하여 제품소프트웨어의 신규 개발, 변경, 개선과 관련된 버전 관리 도구를 사용한다. 
-버전 관리 도구를 활용하여 제품소프트웨어에 대한 버전 현황 관리와 소스, 관련 자료 백업을 수행한다. (주관식)

애플리케이션 성능관리에 대한 5가지 주요 구성요소를 설명하시오. (주관식)
1. 최종 사용자 환경 모니터링 및 평가
2. 애플리케이션 성능과 관련된 모든 소프트웨어 요소 및 하드웨어 요소의 성능 측정
3. 애플리케이션 전송 플랫폼을 구성하는 하드웨어 및 소프트웨어에서 이동하는 사용자 정의 트랜잭션 프로파일링
4. 플랫폼을 구성하는 하드웨어 및 소프트웨어의 리소스 수요 평가
5. 나머지 4개 범주에서 집계된 데이터를 분석해 패턴을 파악하고 우려되는 영역을 식별해 애플리케이션 성능 최적화를 위해 취해야 할 조치의 단계를 우선순위에 따라 지정



