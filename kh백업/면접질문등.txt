면접때 경력 뻥튀기하는지 물어봐도 되나?

<인성면접>
0. 
- 해당 회사가 무슨 기술을 쓰는지, 어떤 회사인지 찾아본 후 면접을 갈 것.
 회사에 대한 질문을 안하는 경우도 있지만, 관심을 가지고 찾아봐야 알 수 있는 회사의 업무를 물어보는 경우도 있음 (대답 시 면접관들의 태도가 호감적으로 변경)
- 인성면접 외의 기술면접때도 어투나 행동을 계속 살핌. 다대다 면접의 경우 다른 면접자들의 대답을 경청하는 태도도 유심히 관찰
- 기술질문이 너무 적으면 인성질문 사이에 기술 어필도 적당히 어필 가능 (많이하면 자만심으로 비추니 적당히!)

1.
- 1~2분 자기소개
- 개발분야를 선택한 계기/동기(ex 비전공자가 왜 이 길을 선택했는가?)
- 상사가 부당한 명령을 내린다면? / 상사와 갈등이 생긴다면?(인터넷에서 압박면접관련 내용 찾아보기)
- 야근에 대한 생각
- 해당 회사를 한 문장으로 설명한다면?(그 회사가 뭐하는 회사인지)
- 3년,5년,10년 뒤 자신의 상황 예측("우리 회사를 글로벌 회사로 만들겠습니다, JAVA마스터가 되겠습니다."와 같은 허황된 말은 절대 하지말것. 실천가능한 것으로 얘기할 것)
- 희망연봉(+- 200만원. 여긴 꼭가야돼(-200), 가도 그만 안가도 그만(+200))
- 회사에 궁금한 점이 있나요? 
  >>회사에 대해 관심을 가지고 갈 것. ex) 담당직무에 관한 질문, 뉴스기사에 나온 회사 사업에 대한 질문, 개발버전(자바,스프링 등), 야근/주말출근, 사수 등
- 우리 회사(팀) 에 합격한다면 가장 하고 싶은 것은? (그 회사의 ~~ 프로젝트에 합류하고 싶다)

- (친구와 함께 면접간 경우) 친구들 중 꼭 한명만 뽑아야 한다면 누구를 뽑아야 할까? 그 이유는?

<기술면접>
2.
* framework : 어떠한 프로그램을 만들기 위한 기본적인 틀
* library : 기능들의 집합(모듈)
* solution : 문제해결을 위한 H/W, S/W, skill 등

스프링 레거시 프로젝트의 패키지명이 3단계인 이유
자바 코딩 규칙(Coding Convention)
package는 최소 3레벨 이상으로 구성되어야 한다. ( [레벨1].[레벨2].[레벨3] )
보통 프로젝트의 그룹을 규정해주고(com.tody) 그 하위 패키지에 현재 프로젝트의 성격을 규정한다(lovely)
굳이 이렇게 안해도 되지만, 이렇게 쓰면 나중에 많은 프로젝트들이 있어도 쉽게 분류하여 찾을 수 있다고 한다.

- 전위연산자 후위연산자 사용 결과
- 접근제한자란?
- 자바의 메모리(static, stack, heap)
- java 란 : type 변수 = 값;
	type : 기본타입(call by value)과 참조타입(call by reference)으로 나뉜다.
		- 기본타입 : 호출하면 값이 나온다.
		- 참조타입 : 호출하면 주소가 나온다.
- oop란? (+ 특징에 대해 설명하라) : 클래스를 가지고 메모리에 적재한 instance(object, 객체).
	- 추상화 : 추상적인 큰 개념으로 묶자. ex) 동물 <- 고양이, 강아지
	- 캡슐화 : 코드는 볼 수 없지만 기능은 사용할 수 있는 것.
	- 상속 : 상위 객체가 가진 것을 하위 객체가 물려받는 것
	- 다형성 : 같은 이름으로 다른 행동을 하는 것. ex) Animal a = new Dog();  a.bark();
		cf) overload
- Array(고정크기), Collection(가변크기) : 여러개의 값을 효과적으로 관리하기위한 객체.
	이터레이터(list, set), 엔트리(map)
- 디자인패턴이란? (+ 아는 패턴에 대해 설명하라) 
	싱글톤 : 객체를 한번만 만들고 이를 호출한다.(생성자를 private으로 하여 new 사용을 못하게 하고 getInstance()를 활용해서 호출한다. )
- 클래스와 인스턴스의 차이점 : 
	- 클래스는 설계도.(member(field(전역변수, 속성),method(기능)), constructor로 구성.)
		-field는 static(클래스변수, Person.eat(); ), non-static(인스턴스변수, 객체생성해서 가져올 수 있음. Person p = 		new Person(); )
	- 인스턴스
- 인터페이스란?
- 추상 클래스와 인터페이스 차이점
- extends / implements 차이점
- override/overload 차이점
- call by value/call by reference 차이점
- array/list/map 차이점
- ajax란 : 비동기. 서버 몰래 동작함. 페이지가 새로고침 되지 않음. server랑 동기화 되지않아서 주소표시창이 변하지 않음. 함수가 성공적으로 리턴되든 안되는 자기 할거 계속 함.
- 프레임워크의 장단점
- 프레임워크와 라이브러리의 차이점 (프로그램의 기본 골격이 되는 기본 코드(틀) / 특정 목적을 위해 사용하는 함수들을 모듈화한 것(jar파일, 코드는 은닉되어 있지만 기능은 사용할 수 있는 것))
- mvc란?
★★★★★- web server와 was의 차이점 : web server는 정적.  was는 동적(dynamic)
- javascript / jquery 차이점 : javascript는 client에 있음. 
- jsp / servlet 차이점 : servlet은 자바코드 안에 html이 있음. jsp는 html안에 java코드(scriptlet)가 들어있음.
- ServletContainer : server(tomcat)를 말함.
- scope
- spring di/ioc란?  
	POJO : 자바 기본 기술(getter, setter메소드로 이루어진 value object성 bean)
	SpringFramework : POJO를 활용하여 결합도를 낮추는 경량 프레임워크
	DI : 의존 주입(spring으로 만들어진 객체에 값(생성자(constructor-arg), setter(property), 필드(annotation))을 넣어주는 것. 이로 인해 결합도가 낮아짐)
	IOC(Inversion of Control) : 제어 역전(기존 객체 생성 방식(필요한곳에서 객체 생성)이 아닌 Spring에서 객체를 생성하여 필요한 곳에서 쓰는 것, 객체를 생성하는 곳과 사용하는 곳을 나누자.)
	OCP : 건드리면 안되는 부분(기존코드)은 close, 확장(상속)시킬 수 있는 부분들은 open한 것
- aop란? (프로젝트에서 사용한 aop 설명) (관점 지향 프로그래밍.) : 문제를 해결하기 위한 핵심관심사항과 전체에 적용되는 공통관심사항을 기준으로 프로그래밍함으로써 공통모듈을 여러 코드에 쉽게 적용할 수 있도록 지원하는 기술.
	CC(Core Concern) : 주 관심사항.(공통적이지 않은 사항.)
	CCC(Cross Cutting Concern) : 공통 관심사항. (공통적인것을 빼내서 모듈화하여 필요한 곳에 적용시키자)
Join Point : 공통적으로 넣을 곳의 위치(작업이 실행되는 시점, (메소드를) 호출하는 시점, ccc가 들어갈 시점)

Pointcut : join point(타겟) 중에 어디에 넣을건지 정의하는 것. (Before, After...)

Advice : ccc 코드.(공통적으로 넣을 코드)

Aspect : pointcut + advice = aspect(advisor) (공통적인 코드를 어디에 붙일지 알고 있음)

Weaving : 프록시가 납치해서 앞 뒤에 붙여준 것을 원래 프로그램에 엮어서 돌려주는것. 특정 joinpoint에 묶이는 것. 실제로 위 코드를 붙이는 것. 
※ oop와 aop의 차이. 	
	oop : 기능에 따른 객체를 만들어 사용하겠다.(캡슐화, 은닉화, 다형성, 상속성, 재사용성)
	aop : cc와 ccc를 구분하여 cc에 영향을 미치지 않고 사이사이에 ccc를 효과적으로 잘 끼워넣도록 하는 개발 방법이다. 			즉, 코드 밖에서 모듈(ccc)을 비즈니스 로직(cc)에 삽입하는 것이다.

※ 스프링 MVC 의 구성요소 5가지
-DispatcherServlet :
클라이언트의 요청을 전달 받는다. 컨트롤러에게 클라이언트의 요청을 전달하고 컨트롤러가 리턴한 결과값을
View에 전달하여알맞은 응답을 생성한다.
-HandlerMapping :
클라이언트의 요청 URL을 어떤 컨트롤러가 처리할지를 결정한다.
RequestURL과 Controller 클래스의 맵핑을 관리한다.
-Controller :
클라이언트의 요청을 처리한 뒤, 그 결과를 DispatcherServlet에 알려준다.
비즈니스 로직을 호출하여 처리 결과 ModelAndView 인스턴스를 반환한다.
-ModelAndView :
컨트롤러가 처리한 결과 정보 및 뷰 선택에 필요한 정보를 담는다.
-ViewResolver :
컨트롤러의 처리결과를 생성할 뷰를 결정한다.

※ 스프링 MVC 의 절차 : request -> listener -> xml -> listener -> dispatcher servlet -> @controller, @service, @repository, db -> model&view -> dispatcher servlet -> view resolver -> response

@ResponseBody : view를 리턴하는게 아닌 java 객체를 리턴해줌.

- maven이란? (빌드/배포 관리 툴, (dependency를 통해) jar파일을 관리해준다. 다른곳에서도 쓸 수 있다.)
- spring 사용한 버전은?
- 필터와 인터셉터의 차이점
- restful api란?
- 파일 업로드 과정 설명(코드 작성하는 것처럼)

- 정규화란?
- order by / group by 차이점
- join 관련 문제
- pl/sql 이 뭐의 약자인가 (Oracle’s Procedural Language extension to SQL)


3.
- 본인이 담당한 기능이 어느날 실행이 안된다. 껏다 켜보니 잘되고, 어느 땐 안되고 등등..10에 한두번이 실행이 안되면 어디서부터 문제를 찾아서 해결할 것인가? (프로젝트, 프로그램, 언어마다 다 달라서 정답이 없는 문제. 평소 본인은 에러 발생시 에러의 위치를 파악하여 디버깅 한다.)
- it 기술동향 (비트코인, 블록체인, 딥러닝, 클라우드 ..)
- 자소서에 기술한 프로젝트(포트폴리오) 관련 질문 (로그인파트 였으면 로그인에 관련된 질문, 내가 구현한 기능이 아니어도 대충 어떤 식인지는 알고 있어야 함.)
- 구글 면접질문 등(맨홀 뚜껑은 왜 동그란가?)

4.
- 구구단 손코딩
- byte a = 1; 
  byte b = 2; 
  byte sum = a+b; 
//오류가 나는지 안나는지, 오류가 나면 왜 오류가 나는지 설명(오류발생, java에서의 연산은 int 연산이므로 a+b 할때  byte로 형변환 해줘야 한다. ∴ byte sum = (byte)a+b; )

- String a = "가";
  String b = new String("가");
  System.out.println(a==b);
  System.out.println(a.equals(b));
//출력 결과 설명 (a는 string pool, b는 string 객체에 저장됨. 따라서 첫번째 syso는 false, 2번째는 true)

- jdbc 손코딩 (슈도 psudo 코드. 문법에 맞지않아도 봤을때 알아들을 수 있는 코드 ex for(1~10) {} )
- 테이블 2개 조인하는 쿼리 손코딩
- 서브쿼리 손코딩

<추가>
5. 걸러야 되는 회사 답변
- 프로젝트에서 pm들이 주로 옛날사람이기 때문에 신기술 공부할 필요 없다 (공부해봤자 취업안된다)
- 비전공자가 취업하려면 경력뻥튀기는 해야된다. (이바닥이 다 그렇다)
- 퇴직금 포함(하면 연봉/13, 안하면 연봉/12)
- 프로젝트에 파견되었을 때 잘하는 사람이 니 선임이다.(선임과 같이 투입되나요 의 답변) (팀단위로 움직이는 SI회사로 갈것)
- 우리는 원래 학원출신 안쓰는데~
- 이바닥 좁다며 협박아닌 협박(이바닥 좁으니 그냥 우리회사 들어와라)

6. 좋은 사이트

<구직활동>
- 잡코리아, 사람인, 인크루트, 로켓펀치, 원티드, 링크드인, 인디드
- 주니어 개발자 채용 정보
https://github.com/jojoldu/junior-recruit-scheduler?fbclid=IwAR0dVh-LBGCXnhFP_6yvV9P1CJV7ZkZMMvVrxh8TBi255kqmVFVsbJ6mg8k&mc_cid=d457ae7f20&mc_eid=3ce8f28a6a

- 자소설 닷컴 : 채용공고 달력, 해당 기업 자소서 문항 등 제공
https://jasoseol.com/

- 프로그래머스 : 코딩 테스트 연습, 채용
https://programmers.co.kr/

<회사 평가>
- 전자공시시스템 : 해당 회사 경영상태 파악
http://dart.fss.or.kr/
- 크레딧잡
https://kreditjob.com/
- 잡플레닛
https://www.jobplanet.co.kr/welcome/index

<온라인 교육>
- 인프런 : 괜찮은 무료강의 많음
https://www.inflearn.com/
- 대학공개강의
http://www.kocw.net/home/index.do

<오프라인 모임>
- 온오프믹스 : 세미나, 컨퍼런스 등 검색
https://onoffmix.com/
- festa.io : 세미나, 컨퍼런스 등 검색
https://festa.io/



<입사후>
7. 질문하는 방법
- 특정 하나의 문제를 가지고 3~4시간정도 아무런 진전이 없다면, 바로 질문하자.
  1) 해당 오류메시지를 가지고 구글링.
  2) 구글링해서 찾은 해답을 시도 및 정리 (어떤 방법을 썼고, 어떻게 안되는지)
  3) 2~3개정도의 인터넷 해답으로도 문제가 해결이 안되면, 2번에서 정리한 내용을 가지고 질문
  예) "xx 문제가 일어나 a 방법을 써봤는데 a'이 되면서 해결이 안되었고, b 방법을 써봤는데 b'이 되면서 해결이 안되었습니다. 제가 어떤 방법을 더 시도해봐야 할까요?"

8. 퇴사
- 인격적 모독, 건강상의 이유 등이 아니라면 되도록 버티자.
- 월급이 밀리면 바로 퇴사해야 함.
- 보통 인수인계 기간 한달 정도를 암묵적으로 지킴.(퇴사는 통보이므로 인수인계 기간을 꼭 지킬 필요는 없음, 그래도 나중을 위해 지키는 것이 좋다.)
- 다른 회사에 면접보러 다니면서 이직할 회사를 찾아놓고, 그 후에 퇴사하는게 좋음 (공백이 생기면 마음이 급해져서 안좋은 회사로 이직할 가능성 높음)














